services:
  mongo:
    image: 'mongo:latest'
    container_name: mongo
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_DB: ${MONGODB_DBNAME}
      MONGO_USER: ${MONGODB_USER}
      MONGO_PASSWORD: ${MONGODB_PASSWORD}
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--quiet",
          "127.0.0.1/test",
          "--eval",
          "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s    
    volumes:
      - mongodb:/var/lib/mongodb/data
      - ./mongo-entrypoint/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
      #- ./init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - monitoring

  postgresql:
    image: postgres:15.4
    container_name: postgresql
    environment:
      POSTGRES_USER: ${PGSQL_USERNAME}
      POSTGRES_PASSWORD: ${PGSQL_PASSWORD}
      POSTGRES_DB: ${PGSQL_DBNAME}
      PGDATA: /data/postgres
      TZ: Asia/Tehran
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${PGSQL_DBNAME} -U ${PGSQL_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgresql:/data/postgres
    ports:
      - "${PGSQL_PORT:-5432}:5432"
    restart: 
      unless-stopped
    networks:
      - monitoring

  mongo-exporter:
    image: 'percona/mongodb_exporter:0.40.0'
    container_name: mongodb-exporter
    environment:
        # MONGODB_URI: mongodb://<user>:<password>@mongo:27017
        MONGODB_URI: "mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongo/${MONGODB_DBNAME}?sslmode=disable:27017"
    command: ["--collect-all", "--compatible-mode", "--discovering-mode"]
    depends_on:
      prometheus:
        condition: service_started
      mongo:
        condition: service_healthy
    ports:
      - "${MONGODB_EXPORTER_PORT:-9216}:9216"
    restart: 
      unless-stopped
    networks:
      - monitoring

  postgresql-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgresql-exporter
    ports:
      - "${PGSQL_EXPORTER_PORT:-9187}:9187"
    environment:
      DATA_SOURCE_NAME: "postgres://${PGSQL_USERNAME}:${PGSQL_PASSWORD}@postgresql/${PGSQL_DBNAME}?sslmode=disable"
    command: ["--collect-all", "--compatible-mode", "--discovering-mode"]
    depends_on:
      prometheus:
        condition: service_started
      postgresql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: unless-stopped
    volumes:
      - ./prometheus/:/etc/prometheus
      - prometheus:/prometheus
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - ./grafana:/etc/grafana/provisioning
    networks:
      - monitoring

volumes:
  prometheus:
  mongodb:
  postgresql:
  grafana:

networks:
  monitoring:
    labels:
      org.fiware: 'p2code'
    ipam:
      config:
        - subnet: 172.18.1.0/24
